import { Router } from "express";
import {{Model}} from "../models/{{Model}}.js";
import { compare, hashed } from "../bin/utils/bcrypt.js";
import JWT from "jsonwebtoken";
import authenticated from "../bin/middleware/authenticated.js";
import { Flash } from "../bin/constants.js";
import _Jwt from "../bin/domain/JWT.js";

const {{router}} = Router();

{{router}}.get("/", authenticated, (req, res, next) => {
  try {
    const {{router}} = ({{Model}}.all()).map(({{model}}) => {{model}}?.exclude("{{authenticator}}"));
    return res.render("{{router}}/index", { {{router}} });
  } catch (e) {
    next(e);
  }
});

{{router}}.get("/register", (_, res, next) => {
  try {
    res.render("{{router}}/register");
  } catch (e) {
    next(e);
  }
});

{{router}}.get("/edit/:id", (req, res, next) => {
  try {
    const { id } = req.params;
    const { {{authenticator}}, ...{{model}} } = ({{Model}}.find(id))?.exclude("{{authenticator}}");
    return res.render("{{router}}/edit", { {{model}} });
  } catch (e) {
    e.status = 404;
    next(e);
  }
});

{{router}}.post("/edit/:id", (req, res, next) => {
  const { id } = req.params;
  const {{model}} = {{Model}}.find(id);
  try {
    const { oldPassword, passwordConfirmation, ...body } = req.body;
    if (!compare(oldPassword, {{model}}.{{authenticator}})) {
      req.flash(Flash.ERROR, "Old {{authenticator}} does not match");
      return res.redirect("/{{router}}/edit", { {{model}} });
    }
    if (body.{{authenticator}} !== passwordConfirmation) {
      req.flash(Flash.ERROR, "New passwords do not match");
      return res.redirect("/{{router}}/edit", { {{model}} });
    }
    const updated = { ...body, {{authenticator}}: hashed(body.{{authenticator}}) };
    {{Model}}.update(id, updated);
    return res.redirect("/{{router}}");
  } catch (e) {
    next(e);
  }
});

{{router}}.get("/login", (req, res, next) => {
  try {
    const { referer } = req.query;
    return res.render("{{router}}/login", { referer });
  } catch (e) {
    next(e);
  }
});

{{router}}.post("/login", (req, res, next) => {
  try {
    const { {{identifier}}, {{authenticator}} } = req.body;
    const db{{Model}} = {{Model}}.findBy({ {{identifier}} });
    if (!db{{Model}}) {
      req.flash(Flash.ERROR, "{{Model}} not found");
      return res.redirect("/{{router}}/login");
    }
    const { {{authenticator}}: userPassword, ...{{model}} } = db{{Model}};

    if (!compare({{authenticator}}, userPassword)) {
      req.flash(Flash.ERROR, "Wrong {{authenticator}}");
      return res.redirect("/{{router}}/login");
    }
    db{{Model}}.save();
    res.cookie(
      "app",
      JWT.sign({{model}}, process.env.JWT_SECRET, {
        expiresIn: process.env.COOKIE_EXPIRY,
      })
    );
    req.flash(Flash.SUCCESS, "Logged in successfully");
    if (req.query.referer) return res.redirect(req.query.referer);
    return res.redirect(`/{{router}}`);
  } catch (e) {
    next(e);
  }
});

{{router}}.get("/logout", (req, res, next) => {
  try {
    res.redirect("/{{router}}/login");
  } catch (e) {
    next(e);
  }
});

{{router}}.post("/logout", (req, res, next) => {
  try {
    _Jwt.add(req.cookies.app);
    res.clearCookie("app");
    req.flash(Flash.SUCCESS, "Logged out successfully");
    res.redirect("/{{router}}/login");
  } catch (e) {
    next(e);
  }
});

{{router}}.post("/delete/:id", (req, res, next) => {
  try {
    if (res.locals.currentUser !== req.params.id) {
      req.flash(Flash.ERROR, "You are not authorized to perform this action");
      return res.status(403).redirect(req.headers.referer);
    }
    {{Model}}.delete(req.params.id);
    req.flash(Flash.SUCCESS, "{{Model}} has been deleted");
    return res.redirect("/{{router}}");
  } catch (e) {
    next(e);
  }
});

{{router}}.get("/:id", (req, res, next) => {
  try {
    const {{model}} = ({{Model}}.find(req.params.id)).exclude(
      "{{authenticator}}",
      "_csrf_token"
    );
    return res
      .status(200)
      .render("{{router}}/{{model}}", { {{model}} });
  } catch (e) {
    next(e);
  }
});

{{router}}.post("/", (req, res, next) => {
  try {
    const { passwordConfirmation, ...body } = req.body;
    if (passwordConfirmation !== body.{{authenticator}}) {
      req.flash(Flash.ERROR, "Passwords do not match");
      return res.redirect("/{{router}}/register");
    }
    const {{model}} = { ...body, {{authenticator}}: hashed(body.{{authenticator}}) };
    {{Model}}.create({{model}});
    return res.redirect("/{{router}}");
  } catch (e) {
    next(e);
  }
});

export default {{router}};
